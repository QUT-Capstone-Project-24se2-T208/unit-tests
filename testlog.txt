> solar-calculator@1.0.0 test
> jest --verbose

 FAIL  test/advanced-functions.test.js
  detectCountry()
    √ returns AU for Australia coordinates (12 ms)
    √ returns US for unknown coordinates (1 ms)
    √ returns CN for China coordinates (1 ms)
  calculateTotalFromHourlyData()
    √ sums valid values (1 ms)
    √ ignores null and NaN
    √ returns 0 if not an array (1 ms)
  getAzimuthDirection()                                                                                                                                                                                            
    √ returns North for 0°                                                                                                                                                                                         
    √ returns East for 90° (1 ms)                                                                                                                                                                                  
    √ returns custom string for odd angle (1 ms)                                                                                                                                                                   
  getRecommendedSystemSize                                                                                                                                                                                         
    √ returns correct recommended size with normal input (1 ms)                                                                                                                                                    
    √ returns minimum size of 1 if calculated size is less than 1                                                                                                                                                  
    √ handles zero or invalid dailyPvoutCsi safely (3 ms)                                                                                                                                                          
    √ returns 1 if usage is 0                                                                                                                                                                                      
  extractMonthlyHourlyProfile                                                                                                                                                                                      
    √ returns correctly scaled hourly data for given month and system size (3 ms)                                                                                                                                  
    √ returns zeros if data is missing for the month (1 ms)                                                                                                                                                        
    √ handles null and NaN values gracefully (2 ms)                                                                                                                                                                
    √ defaults system size to 1 if not provided (1 ms)                                                                                                                                                             
  getDaysInMonth                                                                                                                                                                                                   
    √ returns correct number of days for common months (1 ms)                                                                                                                                                      
    √ returns 28 for February in non-leap years (1 ms)                                                                                                                                                             
    × INTENTIONAL FAIL: expects February to have 29 days (leap year) (3 ms)                                                                                                                                        
    √ returns 0 for invalid month index (1 ms)                                                                                                                                                                     
                                                                                                                                                                                                                   
  ● getDaysInMonth › INTENTIONAL FAIL: expects February to have 29 days (leap year)                                                                                                                                
                                                                                                                                                                                                                   
    expect(received).toBe(expected) // Object.is equality                                                                                                                                                          
                                                                                                                                                                                                                   
    Expected: 29                                                                                                                                                                                                   
    Received: 28                                                                                                                                                                                                   
                                                                                                                                                                                                                   
      129 |                                                                                                                                                                                                        
      130 |     test('INTENTIONAL FAIL: expects February to have 29 days (leap year)', () => {
    > 131 |       expect(getDaysInMonth(1)).toBe(29); // This will fail
          |                                 ^
      132 |     });
      133 |
      134 |     test('returns 0 for invalid month index', () => {

      at Object.toBe (test/advanced-functions.test.js:131:33)

 FAIL  test/basic-functions.test.js
  getSystemRequirements
    √ small home setup (14 ms)
    √ medium setup (5 ms)                                                                                                                                                                                          
    √ high consumption household (3 ms)                                                                                                                                                                            
    × very large house (9 ms)                                                                                                                                                                                      
    √ industrial or large rural property (1 ms)                                                                                                                                                                    
                                                                                                                                                                                                                   
  ● getSystemRequirements › very large house                                                                                                                                                                       
                                                                                                                                                                                                                   
    expect(received).toEqual(expected) // deep equality                                                                                                                                                            
                                                                                                                                                                                                                   
    - Expected  - 3                                                                                                                                                                                                
    + Received  + 3                                                                                                                                                                                                
                                                                                                                                                                                                                   
      Object {
    -   "batteryText": "50+ kWh",
    -   "inverterText": "15kVA Inverter",
    -   "solarText": "25 x 390W",
    +   "batteryText": "40 - 50kWh",
    +   "inverterText": "2x10kVA Inverter",
    +   "solarText": "35 x 390W",
      }

      31 |     test('very large house', () => {
      32 |     const result = GetSystemRequirements(15, 50, 80, 1, 5);
    > 33 |     expect(result).toEqual({
         |                    ^
      34 |         inverterText: '15kVA Inverter',
      35 |         solarText: '25 x 390W',
      36 |         batteryText: '50+ kWh'

      at Object.toEqual (test/basic-functions.test.js:33:20)

 FAIL  test/dom-functions.test.js
  √ adds empty message if appliance list is empty (34 ms)
  √ removes empty message when appliances exist (6 ms)
  √ adds appliance row to table and marks item as active (12 ms)                                                                                                                                                   
  √ filters appliances by category (5 ms)                                                                                                                                                                          
  √ clears appliance list and resets states if confirmed (5 ms)                                                                                                                                                    
  updateCurrencyDisplay                                                                                                                                                                                            
    √ correctly displays PG currency (3 ms)                                                                                                                                                                        
    × clears DOM for unsupported country like SB (7 ms)                                                                                                                                                            
  User Input Field Tests                                                                                                                                                                                           
    √ Reserve Days should accept numbers within 0.5 - 10 (5 ms)                                                                                                                                                    
    × Reserve Days should reject numbers outside 0.5 - 10 (5 ms)                                                                                                                                                   
    × Sun Hours should reject values above 10 (7 ms)                                                                                                                                                               
    × INTENTIONAL FAIL: Quantity should reject excessive values (5 ms)                                                                                                                                             
    × INTENTIONAL FAIL: Wattage should reject excessive values (3 ms)                                                                                                                                              
    √ Only numeric input is accepted for quantity (2 ms)                                                                                                                                                           
                                                                                                                                                                                                                   
  ● updateCurrencyDisplay › clears DOM for unsupported country like SB                                                                                                                                             
                                                                                                                                                                                                                   
    expect(received).toBe(expected) // Object.is equality                                                                                                                                                          
                                                                                                                                                                                                                   
    Expected: "SBD"                                                                                                                                                                                                
    Received: "USD"                                                                                                                                                                                                

      125 |     updateCurrencyDisplay("SB", countryData);
      126 |
    > 127 |     expect(document.getElementById("currency-symbol").textContent).toBe("SBD");
          |                                                                    ^
      128 |     expect(document.getElementById("currency-symbol-bill").textContent).toBe("$");
      129 |     });
      130 | });

      at Object.toBe (test/dom-functions.test.js:127:68)

  ● User Input Field Tests › Reserve Days should reject numbers outside 0.5 - 10

    expect(received).toBe(expected) // Object.is equality

    Expected: 10
    Received: 15

      162 |     const input = document.getElementById('reserve-days');
      163 |     fireEvent.change(input, { target: { value: '15' } });
    > 164 |     expect(parseFloat(input.value)).toBe(10);
          |                                     ^
      165 | });
      166 |
      167 | test('Sun Hours should reject values above 10', () => { // Sun Hours Test

      at Object.toBe (test/dom-functions.test.js:164:37)

  ● User Input Field Tests › Sun Hours should reject values above 10

    expect(received).toBe(expected) // Object.is equality

    Expected: 10
    Received: 15

      168 |     const input = document.getElementById('sun-hours');
      169 |     fireEvent.change(input, { target: { value: '15' } });
    > 170 |     expect(parseFloat(input.value)).toBe(10); 
          |                                     ^
      171 | });
      172 |
      173 | test('INTENTIONAL FAIL: Quantity should reject excessive values', () => { // Quantity Test

      at Object.toBe (test/dom-functions.test.js:170:37)

  ● User Input Field Tests › INTENTIONAL FAIL: Quantity should reject excessive values

    expect(received).toBeLessThanOrEqual(expected)

    Expected: <= 99
    Received:    99999

      174 |     const quantity = document.querySelector('.quantity');
      175 |     fireEvent.change(quantity, { target: { value: '99999' } });
    > 176 |     expect(parseInt(quantity.value)).toBeLessThanOrEqual(99); // This will fail currently
          |                                      ^
      177 | });
      178 |
      179 | test('INTENTIONAL FAIL: Wattage should reject excessive values', () => { // Wattage Test

      at Object.toBeLessThanOrEqual (test/dom-functions.test.js:176:38)

  ● User Input Field Tests › INTENTIONAL FAIL: Wattage should reject excessive values

    expect(received).toBeLessThanOrEqual(expected)

    Expected: <= 8000
    Received:    99999

      180 |     const wattage = document.querySelector('.wattage');
      181 |     fireEvent.change(wattage, { target: { value: '99999' } });
    > 182 |     expect(parseInt(wattage.value)).toBeLessThanOrEqual(8000); // This will fail currently
          |                                     ^
      183 | });
      184 |
      185 | test('Only numeric input is accepted for quantity', () => {

      at Object.toBeLessThanOrEqual (test/dom-functions.test.js:182:37)

Test Suites: 3 failed, 3 total
Tests:       7 failed, 32 passed, 39 total
Snapshots:   0 total
Time:        2.988 s
Ran all test suites.